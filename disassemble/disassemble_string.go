// Code generated by "stringer -type=arrangementSpec,operandClass,condition,shiftType,failureCode,Group -output disassemble_string.go"; DO NOT EDIT.

package disassemble

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ARRSPEC_NONE-0]
}

const _arrangementSpec_name = "ARRSPEC_NONE"

var _arrangementSpec_index = [...]uint8{0, 12}

func (i arrangementSpec) String() string {
	if i >= arrangementSpec(len(_arrangementSpec_index)-1) {
		return "arrangementSpec(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _arrangementSpec_name[_arrangementSpec_index[i]:_arrangementSpec_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NONE-0]
	_ = x[IMM32-0]
	_ = x[IMM64-0]
	_ = x[FIMM32-0]
	_ = x[STR_IMM-0]
	_ = x[REG-0]
	_ = x[MULTI_REG-0]
	_ = x[SYS_REG-0]
	_ = x[MEM_REG-0]
	_ = x[MEM_PRE_IDX-0]
	_ = x[MEM_POST_IDX-0]
	_ = x[MEM_OFFSET-0]
	_ = x[MEM_EXTENDED-0]
	_ = x[LABEL-0]
	_ = x[CONDITION-0]
	_ = x[NAME-0]
	_ = x[IMPLEMENTATION_SPECIFIC-0]
}

const _operandClass_name = "NONE"

var _operandClass_index = [...]uint8{0, 4}

func (i operandClass) String() string {
	if i >= operandClass(len(_operandClass_index)-1) {
		return "operandClass(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _operandClass_name[_operandClass_index[i]:_operandClass_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COND_EQ-0]
	_ = x[COND_NE-1]
	_ = x[COND_CS-2]
	_ = x[COND_CC-3]
	_ = x[COND_MI-4]
	_ = x[COND_PL-5]
	_ = x[COND_VS-6]
	_ = x[COND_VC-7]
	_ = x[COND_HI-8]
	_ = x[COND_LS-9]
	_ = x[COND_GE-10]
	_ = x[COND_LT-11]
	_ = x[COND_GT-12]
	_ = x[COND_LE-13]
	_ = x[COND_AL-14]
	_ = x[COND_NV-15]
	_ = x[END_CONDITION-16]
}

const _condition_name = "COND_EQCOND_NECOND_CSCOND_CCCOND_MICOND_PLCOND_VSCOND_VCCOND_HICOND_LSCOND_GECOND_LTCOND_GTCOND_LECOND_ALCOND_NVEND_CONDITION"

var _condition_index = [...]uint8{0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 125}

func (i condition) String() string {
	if i >= condition(len(_condition_index)-1) {
		return "condition(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _condition_name[_condition_index[i]:_condition_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SHIFT_TYPE_NONE-0]
	_ = x[SHIFT_TYPE_LSL-1]
	_ = x[SHIFT_TYPE_LSR-2]
	_ = x[SHIFT_TYPE_ASR-3]
	_ = x[SHIFT_TYPE_ROR-4]
	_ = x[SHIFT_TYPE_UXTW-5]
	_ = x[SHIFT_TYPE_SXTW-6]
	_ = x[SHIFT_TYPE_SXTX-7]
	_ = x[SHIFT_TYPE_UXTX-8]
	_ = x[SHIFT_TYPE_SXTB-9]
	_ = x[SHIFT_TYPE_SXTH-10]
	_ = x[SHIFT_TYPE_UXTH-11]
	_ = x[SHIFT_TYPE_UXTB-12]
	_ = x[SHIFT_TYPE_MSL-13]
	_ = x[SHIFT_TYPE_END-14]
}

const _shiftType_name = "SHIFT_TYPE_NONESHIFT_TYPE_LSLSHIFT_TYPE_LSRSHIFT_TYPE_ASRSHIFT_TYPE_RORSHIFT_TYPE_UXTWSHIFT_TYPE_SXTWSHIFT_TYPE_SXTXSHIFT_TYPE_UXTXSHIFT_TYPE_SXTBSHIFT_TYPE_SXTHSHIFT_TYPE_UXTHSHIFT_TYPE_UXTBSHIFT_TYPE_MSLSHIFT_TYPE_END"

var _shiftType_index = [...]uint8{0, 15, 29, 43, 57, 71, 86, 101, 116, 131, 146, 161, 176, 191, 205, 219}

func (i shiftType) String() string {
	if i >= shiftType(len(_shiftType_index)-1) {
		return "shiftType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _shiftType_name[_shiftType_index[i]:_shiftType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DISASM_SUCCESS-0]
	_ = x[INVALID_ARGUMENTS-1]
	_ = x[FAILED_TO_DISASSEMBLE_OPERAND-2]
	_ = x[FAILED_TO_DISASSEMBLE_OPERATION-3]
	_ = x[FAILED_TO_DISASSEMBLE_REGISTER-4]
	_ = x[FAILED_TO_DECODE_INSTRUCTION-5]
	_ = x[OUTPUT_BUFFER_TOO_SMALL-6]
	_ = x[OPERAND_IS_NOT_REGISTER-7]
	_ = x[NOT_MEMORY_OPERAND-8]
}

const _failureCode_name = "DISASM_SUCCESSINVALID_ARGUMENTSFAILED_TO_DISASSEMBLE_OPERANDFAILED_TO_DISASSEMBLE_OPERATIONFAILED_TO_DISASSEMBLE_REGISTERFAILED_TO_DECODE_INSTRUCTIONOUTPUT_BUFFER_TOO_SMALLOPERAND_IS_NOT_REGISTERNOT_MEMORY_OPERAND"

var _failureCode_index = [...]uint8{0, 14, 31, 60, 91, 121, 149, 172, 195, 213}

func (i failureCode) String() string {
	if i >= failureCode(len(_failureCode_index)-1) {
		return "failureCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _failureCode_name[_failureCode_index[i]:_failureCode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[GROUP_UNALLOCATED-0]
	_ = x[GROUP_DATA_PROCESSING_IMM-1]
	_ = x[GROUP_BRANCH_EXCEPTION_SYSTEM-2]
	_ = x[GROUP_LOAD_STORE-3]
	_ = x[GROUP_DATA_PROCESSING_REG-4]
	_ = x[GROUP_DATA_PROCESSING_SIMD-5]
	_ = x[GROUP_DATA_PROCESSING_SIMD2-6]
	_ = x[END_GROUP-7]
}

const _Group_name = "GROUP_UNALLOCATEDGROUP_DATA_PROCESSING_IMMGROUP_BRANCH_EXCEPTION_SYSTEMGROUP_LOAD_STOREGROUP_DATA_PROCESSING_REGGROUP_DATA_PROCESSING_SIMDGROUP_DATA_PROCESSING_SIMD2END_GROUP"

var _Group_index = [...]uint8{0, 17, 42, 71, 87, 112, 138, 165, 174}

func (i Group) String() string {
	if i >= Group(len(_Group_index)-1) {
		return "Group(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Group_name[_Group_index[i]:_Group_index[i+1]]
}
